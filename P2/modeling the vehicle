 clear;clc;
%机器人建模
V = diag([0.02, 0.5*pi/180].^2);%协方差矩阵，采样间隔sigma d,sigma theta
veh = Vehicle(V);%创建Vechine对象
odo = veh.step(1, 0.3);%单步仿真，速度1m/s，转向角0.3rad
veh.add_driver( RandomPath(10) );
%使用RandomPath类（驱动器），引导机器人至某个特定区域内随机选择的地点
veh.run();
veh.Fx( [0,0,0], [0.5, 0.1] );%Vechine提供了Fx和Fv方法计算雅克比矩阵

%位姿估计
P0 = diag([0.005, 0.005, 0.001].^2);%定义初始协方差
ekf = EKF(veh, V, P0);%将P0传递给一个EKF对象的构造函数
ekf.run(1000);%执行滤波器1000个时间步
veh.plot_xy()%绘制机器人走过的真实路径
hold on
ekf.plot_xy('y')%绘制滤波器估计的机器人路径
P700 = ekf.history(700).P%第700个时间步的协方差矩阵
sqrt(P700(1,1))%x轴方向的PDF标准差
%得到的协方差矩阵左上方的2X2矩阵表示机器人位置的不确定性
%它可以被理解为一个定义了位置置信界限的椭圆
ekf.plot_ellipse([], 'g')%绘制出机器人不同位置的椭圆

figure(2)
ekf.plot_P();%画出位置和航向总的不确定性随时间变化的曲线：
hold on
V = 0.5*diag([0.02, 0.5*pi/180].^2);
P0 = diag([0.005, 0.005, 0.001].^2);%定义初始协方差
ekf = EKF(veh, V, P0);%将P0传递给一个EKF对象的构造函数
ekf.run(1000);%执行滤波器1000个时间步
ekf.plot_P();%画出位置和航向总的不确定性随时间变化的曲线：
hold on
V = 2*diag([0.02, 0.5*pi/180].^2);
P0 = diag([0.005, 0.005, 0.001].^2);%定义初始协方差
ekf = EKF(veh, V, P0);%将P0传递给一个EKF对象的构造函数
ekf.run(1000);%执行滤波器1000个时间步
ekf.plot_P();%画出位置和航向总的不确定性随时间变化的曲线：
legend('1','0.5','2');
